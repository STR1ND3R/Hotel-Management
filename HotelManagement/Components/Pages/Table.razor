@typeparam T
@inject NavigationManager _Navigation
@using System.Reflection

<h3>@typeof(T).Name Table</h3>

@if (_items == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_items.Count == 0)
{
    <h3>No records found</h3>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var prop in propertyNames)
                {
                    <td>@prop.Name</td>
                }
                <td>Actions</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items)
            {
                <tr>
                    @foreach (var prop in propertyNames)
                    {
                        <td>@prop.GetValue(item)?.ToString()</td>
                    }
                    <td>
                        <button class="btn btn-sm" title="Edit" @onclick="() => Edit(GetId(item))">
                            <!-- Edit button SVG icon -->
                        </button>
                        <button @onclick="() => DeleteItem(GetId(item))">
                            <!-- Delete button SVG icon -->
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Func<Task<List<T>>> FetchItems { get; set; }

    [Parameter]
    public Func<int, Task> DeleteItemFunc { get; set; }

    [Parameter]
    public Func<int, string> GetEditUrl { get; set; }

    private List<T>? _items;
    private List<PropertyInfo> propertyNames = GetPropertyNames<T>();

    static List<PropertyInfo> GetPropertyNames<U>()
    {
        return typeof(U).GetProperties(BindingFlags.Public | BindingFlags.Instance).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _items = await FetchItems();
    }

    private async Task DeleteItem(int id)
    {
        await DeleteItemFunc(id);
        _items = await FetchItems();  // Refresh the list
        StateHasChanged();  // Signal that the component needs to re-render
    }

    private void Edit(int id)
    {
        var editUrl = GetEditUrl(id);
        _Navigation.NavigateTo(editUrl);
    }

    private int GetId(T item)
    {
        return (int)item.GetType().GetProperty("Id").GetValue(item);
    }
}
