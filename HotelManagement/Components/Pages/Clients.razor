@page "/clients"
@rendermode InteractiveServer
@inject NavigationManager _Navigation
@inject IRepoClients _Repo
@using HotelManagement.Models
@using HotelManagement.Repo
@using Microsoft.EntityFrameworkCore.Query





<div class="d-flex flex-row justify-content-between">

    <h3 class="d-inline">Lista de Clientes</h3>

    <button class="btn btn-success" @onclick="@(() => _Navigation.NavigateTo("/client/new"))">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
        </svg>
    </button>


</div>
<div class="my-4">
    <div class="form-group col-3">

        <label for="filtro">Filtrar por email</label><br>
        <InputText id="filtro" class="form-control" @bind-Value="filtro"/>

    </div>
    <div class="btn-group mt-2">
        <button class="btn btn-primary" @onclick="(() => Filtrar(filtro))">Filtrar</button>
        <button class="btn btn-secondary" @onclick="(OnInitializedAsync)">Limpiar</button>
    </div>
</div>

@if (_clients == null)
{
<div class="spinner-border" role="status">
    <span class="visually-hidden">Cargando...</span>
</div>
}
else if (_clients.Count == 0)
{
<h3>No existen clients registradas</h3>
}
else
{
<table class="table table-hover">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>PhoneNumber</th>
        <th>Address</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Client client in _clients)
    {
    <tr>
        <td>@client.Id</td>
        <td>@client.Name</td>
        <td>@client.LastName</td>
        <td>@client.Email</td>
        <td>@client.PhoneNumber</td>
        <td>@client.Adress</td>
        <td>
            
            <div class="btn-group">
                <button class="btn btn-primary" title="Modificar" @onclick="() => Edit(client.Id)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                        <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325"/>
                    </svg>
                </button>
                <button @onclick="(() => DeleteClient(client.Id))" class="btn btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5"/>
                    </svg>
                </button>
            </div>

        </td>
    </tr>
    }
    </tbody>
</table>
}




@code {
    private List<Client>? _clients;

    private string? filtro;

    protected override async Task OnInitializedAsync()
    {
        _clients = await _Repo.GetAll();
        filtro = null;
    }
    
    

    private async Task DeleteClient(int clientId)
    {
        await _Repo.Delete(clientId);
        _clients = await _Repo.GetAll();  // Refresh the client list
        StateHasChanged();  // Signal that the component needs to re-render
    }

    private void Edit(int Id)
    {
        _Navigation.NavigateTo($"client/edit/{Id}");
    }

    private void Filtrar(string keyword)
    {
        OnInitializedAsync();
            _clients.RemoveAll(client => !client.Email.Contains(keyword));
        
    }

}